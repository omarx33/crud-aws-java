name: Deploy API a producción

on:
  push:
    branches: [ main ]

jobs:
  build: #ejecución
    runs-on: ubuntu-latest

    steps:
     - name: Checkout code #clonar el repo y descargarlo en el ubuntu
       uses: actions/checkout@v2
     - name: Setup java
       uses: actions/setup-java@v3 # Usamos la acción para version 17
       with:
         distribution: 'temurin'
         java-version: '17'
     - name: Build with Maven
       run: mvn clean install -DskipTests #compilar el proyecto .jar y desplegar
     - name: Login to DockerHub #conectarse a docker hub
       run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
     - name: Build and push Docker image #construir y subir la imagen a docker hub
       run: docker build -t ${{ secrets.DOCKER_USERNAME }}/dormirios-rest . #nombre de la imagen. el punto es porque se pone en raiz
     - name: Push Docker image #subir la imagen a docker hub
       run: docker push ${{ secrets.DOCKER_USERNAME }}/dormirios-rest
  deploy: #despliegue
    needs: build
    runs-on: self-hosted #correr en un servidor propio antes de desplegar (min 1:48 sesion 10)
    steps:
     - name: pull image a docker hub #descargar la imagen de docker hub
       run: docker pull ${{ secrets.DOCKER_USERNAME }}/dormirios-rest:latest
     - name: remove esisting container #eliminar el contenedor existente
       run: docker rm -f dormirios-rest
     - name: Run container #correr el contenedor
       run: docker run -d -p 80:8080 --name dormirios-rest ${{ secrets.DOCKER_USERNAME }}/dormirios-rest:latest #el server esta en el externo 80, internamente en el 8080

